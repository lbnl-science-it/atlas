
=======
Testing the integration branch image:

# 2022-0203: worked in Mint, not Zorin... base layer is build from CentOS machine and stored in hub.docker :-\
# has R 4.1.2, verified to contain apollo, tidyverse
docker pull                       ghcr.io/lbnl-science-it/atlas:v1.0.2
docker run -it --entrypoint=bash  ghcr.io/lbnl-science-it/atlas:v1.0.2
docker pull                       tin6150/atlas:v1.0.2
docker pull                       ghcr.io/lbnl-science-it/atlas:integration # commit da35dd2 = v1.0.2

#xx docker tag ghcr.io/lbnl-science-it/atlas:v1.0.2 tin6150/atlas:v1.0.2  # duh, this was bad, should rebuild!

docker build -t tin6150/atlas:v1.0.2 -f Dockerfile.atlas .  | tee LOG.Dockerfile.atlas102ex4  ## still don't work in zorin
## new zorin test 0204, didn't work, can't run R to install lib, so zorin was never used as build host
## back to ex4, altBracnh for base
docker build -t tin6150/atlas:base -f Dockerfile.base .  | tee LOG.Dockerfile.base-locked-ex4.0204  
docker tag tin6150/atlas:base tin6150/atlas:base102
docker push  tin6150/atlas:base102   ## tested work on Zorin
docker push  tin6150/atlas:base
docker build -t tin6150/atlas102 -f Dockerfile.atlas
docker build -t tin6150/atlas102 -f Dockerfile.atlas

        #@@ docker tag lbnl-science-it/atlas tin6150/atlas
## TBD, change FROM first



docker push tin6150/atlas:v1.0.2

# the "v" is used in the github workflow to trigger docker-publish build process, so kept them that way instead of using atlas:1.0.2


sfb-v2
======

docker pull  ghcr.io/lbnl-science-it/atlas:sfb-v2


~~~~~

r for atlas eta project - dev notes
===================================


FROM ghcr.io/lbnl-science-it/atlas:base     # r-base official image
FROM tin6150/atlas:base                     # same as above, but build manually and pushed to dockerhub, so it works in aws/ubuntu
FROM ghcr.io/lbnl-science-it/atlas:altbase  # Debian or other OS, then install R as package.  last test with debian:testing, tidyverse was not fully installed.


        #@@ docker build -t lbnl-science-it/atlas -f Dockerfile .  | tee Dockerfile.monolithic.LOG
        #@@ docker tag lbnl-science-it/atlas tin6150/atlas
        docker build -t tin6150/atlas -f Dockerfile .  | tee Dockerfile.monolithic.LOG
        docker push     tin6150/atlas                     # worked :)
        docker run  -it --entrypoint=bash   tin6150/atlas

        # docker run  -it --entrypoint=bash   lbnl-science-it/atlas  # not sure if docker hub exist for lbnl-science-it


        docker build -t tin6150/atlas:base -f Dockerfile.base .  | tee Dockerfile.base.LOG
        docker push tin6150/atlas:base 
        # trying out base, split into multiple Dockerfile later...
        # ghcr docker-publish.yml workflow only work with "Dockerfile", 
        # so will have a branch-specific sym link for this file

        docker run -it tin6150/atlas:base ## hmm, R doesn't work here either

        docker run -it ghcr.io/lbnl-science-it/atlas:base ## R still won't run in Mint, but works on centos7
        docker run -it --entrypoint=bash ghcr.io/lbnl-science-it/atlas:base 
        # also tested build with ubuntu-18.04 in r4eta, R still won't run in Mint.


build via layers
----------------

	# perform build on CentOS machine, so that R is usable in aws/ubuntu instance.
        docker build -t tin6150/atlas:base -f Dockerfile.base  .  | tee LOG.Dockerfile.base.2022.0203
        # for now, still in base branch running this manually ex4
        docker build -t tin6150/atlas:l2   -f Dockerfile.atlas .  | tee LOG.Dockerfile.atlas.2022.0203
        docker push     tin6150/atlas:l2
        docker run -it --entrypoint=bash tin6150/atlas:l2

        # the Debian:11 based image, R worked in Mint.  
        # For now, Dockerfile is sym link to branch specific file (.base vs .atlas)
		

        branch 
          - base: back to using r-base image, will have to do manual build on CentOS and push to docker hub for use on aws/ubuntu
          - altbase: resume work on finding alternate (non ubuntu) os base that has R 4.1 and can get apollo package in it.  no good solution at this point.






	
(see tin6150/r4eta for additional build commands)




manual build
------------

  docker build -t tin6150/atlas:ubuntu -f Dockerfile . | tee Dockerfile.log
  docker push     tin6150/atlas:ubuntu 
  docker tag      tin6150/atlas:ubuntu tin6150/atlas:integrationU
  docker push     tin6150/atlas:integrationU                           # just to be very obvious this is same as integration branch, rebuild cuz of ubuntu compatibility problem.
  # and strangely, this image works in the aws ubuntu instance, but NOT the ghcr one.  unsure why at this point.



R libs
======

core, must have libraries for Atlas 1.0.4:
  tidyverse dplyr  apollo tictoc
  paralle doParallel foreach

other are used for data cleaning somewhere else, should be able to live without them.



version tagging
===============

Best if update Dockerfile.atlas with version/tag info, make that commit, then tag.

eg, after getting a PR or just geerally tag a commit at a specific version

git tag -a v1.0.6 41f98e9 -m "main.R: add modleyear in vehicle output file"
git push --tags origin main


// sfb-v2 (git branch forked from integration v1.0.7)
git tag -a  vBase1.2.0 d4259f7 -m "base layer for sfb-v2"
git push -u origin  vBase1.2.0

git tag -a sfb-v2.0.1 779104a -m "sfb v2.0.1 main.R update to use --mod 1|2"



Singularity in lrc
==================


cd /global/home/users/tin/gs/singularity-repo
singularity pull --name atlas_sfb_v2.sif docker://ghcr.io/lbnl-science-it/atlas:sfb-v2.0.12
#  pull as above worked in lrc

singularity shell -B /global/scratch/users/tin/inbox:/mnt atlas_sfb_v2.sif  
singularity exec  -B /global/scratch/users/tin/inbox:/mnt atlas_sfb_v2.sif  /usr/bin/Rscript /main.R

# -B physical_host_path:path_inside_container   




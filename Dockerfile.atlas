# Dockerfile Layer 2 for atlas
# This append to Layer 1 for quick code update
# docker build -t tin6150/atlas102 -f Dockerfile.atlas .  | tee LOG.Dockerfile.atlas
# docker build -t lbnl-science-it/atlas -f Dockerfile.atlas .  | tee Dockerfile.layer2.log 
# (see DevNotes.rst for alternate details)

# branch specific settings:
# base: Dockerfile -> Dockerfile.base
# main: Dockerfile -> Dockerfile.atlas # ie layer 2 that build on top of Dockerfile.base 
# Can probably alter the .github/workflow/docker-publish.yml, but this will do for now :D

# r-base:3.6.3 was last of 3.x, ca 2019
# r-base:4.1.1  # ca 2021.10, but gchr built image compatibility problem with aws/ubuntu: R won't run
#FROM r-base:3.6.3
#FROM r-base:4.0.3
#FROM r-base:4.1.1  

# ghcr.io/lbnl-science-it/atlas are automated build using an ubuntu container, which works for CentOS, but in aws/ubuntu R won't start
# tin6150/atlas are manual build on centos machine and tag/push to dockerhub.  R works in aws/ubuntu.

# FROM ghcr.io/lbnl-science-it/atlas:vBase1.0.4 Debian bullseye (11) R 4.0.4 Rscript works in U16.04 
#--FROM ghcr.io/lbnl-science-it/atlas:vBase1.0.4 #v1 integration
#FROM ghcr.io/lbnl-science-it/atlas:base       this worked, but prefer explicit version
FROM ghcr.io/lbnl-science-it/atlas:vBase1.2.0

# FROM tin6150/atlas:base   # 2022.0204 is now a "locked r-base:4.1.1 with no apt update, R work on aws/ubuntu 16.04, but unsure about tidyverse (yes on apollo)"
#FROM tin6150/atlas:base

MAINTAINER Tin (at) LBL.gov

ARG DEBIAN_FRONTEND=noninteractive
ARG TERM=dumb
ARG TZ=PST8PDT 
#https://no-color.org/
ARG NO_COLOR=1

## branch l2 (ie layer2, for code dev)
## depends on base branch, rebuild with r-base

RUN echo  ''  ;\
    touch _TOP_DIR_OF_CONTAINER_  ;\
    echo "Layer 2 atlas code addition" | tee -a _TOP_DIR_OF_CONTAINER_  ;\
    export TERM=dumb      ;\
    export NO_COLOR=TRUE  ;\
    cd /    ;\
    echo ""  

RUN echo ''  ;\
    echo '==================================================================' ;\
    echo 'capturing container build info                                    ' ;\
    test -d /opt/gitrepo  || mkdir -p /opt/gitrepo        ;\
    test -d /opt/gitrepo/container_layer2  || mkdir -p /opt/gitrepo/container_layer2          ;\
    git branch | tee /opt/gitrepo/container_layer2/git.branch.out.txt                          ;\
    git log --oneline --graph --decorate | tee /opt/gitrepo/container_layer2/git.lol.out.txt  ;\
    # cd /opt/gitrepo/container_layer2           ;\
    cd /     ;\
    echo ""  



RUN echo ''  ;\
    echo '==================================================================' ;\
    echo '' ;\
    export TERM=dumb  ;\
    ## Rscript --quiet --no-readline --slave -e '{ library(pacman); p_load( optparse, argparse, stats ) }' ;\
    Rscript --quiet --no-readline --slave -e 'library()'   | sort | tee R_library_list.out.l2.txt  ;\
    ls /usr/local/lib/R/site-library | sort | tee R-site-lib-ls.out.l2.txt   ;\
    echo "Done installing packages cran packages - layer 2" | tee -a _TOP_DIR_OF_CONTAINER_     ;\
    date | tee -a      _TOP_DIR_OF_CONTAINER_   ;\
    cd /     ;\
    #// tmp for test with Ling's tmp code
    #// mkdir -p /global/data/transportation/ATLAS/static/urbansim ;\
    #// mkdir -p /global/data/transportation/ATLAS/static/urbansim/model_application ;\
    # I/O dir for sfb-v2 , with DIR_INFO.txt added if repo is copied to /
    mkdir -p /atlast_input   ;\
    mkdir -p /atlast_output  ;\
    pwd  ;\
    echo ""

COPY Dockerfile* /opt/gitrepo/container_layer2/
COPY . /
COPY . /opt/gitrepo/atlas/

ENV DBG_ATLAS_CODE_VER "Atlas sfb-v2.0.2 -- Docker.atlas 2022.1205 d11 r404 w/fastDummies"
ENV DBG_DOCKERFILE Dockerfile.atlas
ENV TZ America/Los_Angeles 

RUN  cd / \
  && touch _TOP_DIR_OF_CONTAINER_  \
  && echo  "--------" >> _TOP_DIR_OF_CONTAINER_   \
  && TZ=PST8PDT date  >> _TOP_DIR_OF_CONTAINER_   \
<<<<<<< HEAD
  && echo  "$DBG_ATLAS_CODE_VER"           | tee -a  _TOP_DIR_OF_CONTAINER_   \
  && echo  "cleaned Dockerfile.atlas"             \
  && echo  "Grand Finale Dockerfile.atlas"



=======
  && echo  "Dockerfile.l2 2022.0201.debian11 l2 atlasCode"     >> _TOP_DIR_OF_CONTAINER_   \
  && echo  "Grand Finale"

#- ENV TZ America/Los_Angeles  
ENV TZ America/Los_Angeles 
# ENV TZ likely changed/overwritten by container's /etc/csh.cshrc
#ENV DOCKERFILE Dockerfile[.cmaq]
# does overwrite parent def of ENV DOCKERFILE
ENV TEST_DOCKER_ENV     this_env_will_be_avail_when_container_is_run_or_exec
ENV TEST_DOCKER_ENV_2   Can_use_ADD_to_make_ENV_avail_in_build_process
ENV TEST_DOCKER_ENV_REF https://vsupalov.com/docker-arg-env-variable-guide/#setting-env-values
ENV DBG_ATLAS_VER       "2022.0201.debian11 l2 atlasCode"
# setting R_LIBS here not needed, it get stored in /etc/r.../profile
#ENV R_LIBS              /usr/local/lib/R/site-library/
##ENV R_LIBS              /usr/local/lib/R/site-library:/usr/lib/R/site-library:/usr/lib/R/library  # not sure if colon list work anyway
# but how to append, eg add to PATH?
>>>>>>> b889e69 (pulled from base branch, re sym link Dockerfile, slight comment update.  This should tigger build with Dockerfile.atlas for layer 2 with Atlas R code.  Debian:11 based, R seems to work in Mint)

#ENTRYPOINT ["cat", "/_TOP_DIR_OF_CONTAINER_"]
#ENTRYPOINT [ "/bin/bash" ]
#ENTRYPOINT [ "/usr/bin/rstudio" ]
#ENTRYPOINT [ "Rscript", "/opt/gitrepo/atlas/Model_application_hima.R" ]
ENTRYPOINT [ "/usr/bin/Rscript", "/main.R" ]
#ENTRYPOINT [ " /usr/lib/R/bin/exec/R", "/main.R" ]
##ENTRYPOINT [ "R" ]
# if no defined ENTRYPOINT, default to bash inside the container
# careful not to cover /home/username (for this container)

# vim: shiftwidth=4 tabstop=4 formatoptions-=cro nolist nu syntax=on
